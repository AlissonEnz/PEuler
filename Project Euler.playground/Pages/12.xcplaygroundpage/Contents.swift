import Foundation

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
36: 1,2,
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

func divisors(of number:Int) -> Int {

    guard number > 3 else {
        if number == 1 {
            return 1
        }
        return 2
    }

    var divisorCount = 2
    let limit = Int(ceil(sqrt(Double(number))))
    
    if limit > 2 {
        for natural in 2...limit {
            if number % natural == 0 {
                divisorCount += 2
            }
        }
    }
    return divisorCount
}


func triangle() -> Int? {
    
    let limit = 100_000_000
    let minDivisorCount = 500
    
    var triangle = 0
    for number in 1...limit {
        
        triangle = triangle + number
        
        let divisorCount = divisors(of: triangle)
        
        if minDivisorCount < divisorCount {
            return triangle
        }
    }
    return nil
}

func p12() {
    let startTime = CFAbsoluteTimeGetCurrent()
    let number = triangle()
    let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
    print("Time elapsed for P12: \(timeElapsed) s")
    if number != nil {
        print("Success: \(number)")
    } else {
        print("Not enough")
    }
}

p12()



